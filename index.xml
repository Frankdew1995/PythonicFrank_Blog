<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pythonic Frank</title>
    <link>/</link>
    <description>Recent content on Pythonic Frank</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>String Formatting with Python-f-String, and why you should start using it</title>
      <link>/tutorial/python-f-string/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/python-f-string/</guid>
      <description>So, What is String Formatting? String Formatting (sometimes also referred as &amp;ldquo;String Interpolation&amp;rdquo;) is a technique for embedding or inserting variables into placeholders in a Python String object. Three ways to format a String in Python: 1. Old school %s String Formatting 2. A better string method String: str.format() 3. f&amp;rdquo;string&amp;rdquo; method - why it&amp;rsquo;s the best for String formatting in Python compared to .format() and %s name = &amp;quot;Frank&amp;quot; age = 24 profession = &amp;quot;Python Dev&amp;quot; language = &amp;quot;Python&amp;quot;  person = dict(name=&amp;quot;Frank&amp;quot; age=24 profession=&amp;quot;Python Dev&amp;quot; language=&amp;quot;Python&amp;quot;)  1.</description>
    </item>
    
    <item>
      <title>Make a QR Code generator (with data store function) with Python</title>
      <link>/tutorial/qr_code_generator_with_python/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/qr_code_generator_with_python/</guid>
      <description>Make a QR Code generator (with data store function) with Python Some features of this Python App: 1. Read any csv files and save each row as a small single dataset into the QR Code 2. Generate these QR Code images with data saved in 3. QR Code images should be readable by a QR Code scanner (e.g. a mobile device.)  Dependencies to install (Some of them you might not happen to use): Django==2.</description>
    </item>
    
    <item>
      <title>Build a cloud based weather SMS service using Python, Twilio and PythonAnywhere with Open Weather API</title>
      <link>/tutorial/build_a_cloud_based_weather_sms_service_using_python_twilio_and_pythonanywhere_with_open_weather_api/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/build_a_cloud_based_weather_sms_service_using_python_twilio_and_pythonanywhere_with_open_weather_api/</guid>
      <description>Build a cloud based weather SMS service using Python, Twilio and PythonAnywhere Have you always been forgetful about checking the weather before going outdoors and got really washed out by the rainy days? In this tutorial, I&amp;rsquo;m sharing with you how to build a cloud-based weather SMS service that runs as scheduled to message you about the weather determining if you need an umbrella or not during the day.  Prerequisites 1.</description>
    </item>
    
    <item>
      <title>Natural Language Processing and sentiment analysis with TextBlob: a Python NLP library</title>
      <link>/tutorial/nlp_and_sentiment_analysis_with_textblob_and_python/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/nlp_and_sentiment_analysis_with_textblob_and_python/</guid>
      <description>What is NLP(Natural Language Processing)? Natural language processing (NLP) is a subfield of computer science, information engineering, and artificial intelligence concerned with the interactions between computers and human (natural) languages, in particular how to program computers to process and analyze large amounts of natural language data. (Wikepedia) Dependency to install: $ pip install textblob
 Some features of TextBlob:  Noun Phrase Extraction Sentiment Analysis Tokenization Words Lemmatization Spell Check Translation  # NLP_and_Sentiment_Analysis_With_TextBlob</description>
    </item>
    
    <item>
      <title>Host static websites with Netlify</title>
      <link>/tutorial/host_static_sites_with_netlify/</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/host_static_sites_with_netlify/</guid>
      <description> Prerequisites  Sign Up a GitHub Account
 Sign up a Netlify Account or log in with your GitHub Account
 Install Git in your local machine.
   How it works? </description>
    </item>
    
    <item>
      <title>Send Email in Batch and Attachments with Mailgun API using Python</title>
      <link>/tutorial/batchsending_mailgun/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/batchsending_mailgun/</guid>
      <description>1.Batch Sending With Mailgun API  Step 1: create a mailing list in mailgun dashboard:
 You can upload a csv file to bulk upload to create a mailing list Or add one recipient at a time to create a mailing list.  Imagine you created a mailing list: no-reply@yourdomain.com
How to proceed with coding: A. Send a general email without a custom greeting using Mailgun Mailing List import requests  def batch_mailing(): requests.</description>
    </item>
    
    <item>
      <title>Send sms with Twilio API using Python</title>
      <link>/tutorial/send_sms_with_twilio_api_using_python/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/send_sms_with_twilio_api_using_python/</guid>
      <description> Guideline  Sign up for a Twilio account
 Grab a free Twilio phone number
 Grab credentials: account_sid and auth_token
   </description>
    </item>
    
    <item>
      <title>Extract tabular data from PDF with Camelot</title>
      <link>/tutorial/extract_tabular_data_from_pdf_with_camelot/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/extract_tabular_data_from_pdf_with_camelot/</guid>
      <description> Install Dependencies  Install Ghostscript:
 mac OS:  $brew install ghostscript
 Windows:  download ghostscript here
 pip install Camelot
$pip install camelot-py[cv]
   </description>
    </item>
    
    <item>
      <title>Host a static website in Heroku for FREE using Python Flask framework</title>
      <link>/tutorial/host_a_static_website_in_heroku/</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/host_a_static_website_in_heroku/</guid>
      <description>Host a static website in Heroku for FREE using Python Flask framework  Guideline: Part 1: Push your website live to Heroku 1.Follow Heroku Documention -Download [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) -Download [Heroku CLI](https://devcenter.heroku.com/articles/getting-started-with-python#set-up) (Command Line Interface)  2.Create a Heroku account 3.Create a project folder and organize the folder structure - in your Terminal / Command Line Prompt $mkdir Website_Example
$cd Website_Example
$mkdir templates
so your folder structure will look like:
Website_Example</description>
    </item>
    
    <item>
      <title>Send Email from a custom domain with Mailgun API using Python</title>
      <link>/tutorial/mailgun/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/mailgun/</guid>
      <description>Send Email from a custom domain with Mailgun API using Python Intro There are plenty of tutorials on the Internet teaching how to send an Email using Python. Why bothering with another tutorial talking about sending Email with a custom domain? Well at this point, I agree with you that you&amp;rsquo;re right. But this tutorial is aiming for the folks who might be running a professional online business or website and looking for possibilities of sending customers and marketing emails in an easy and scalable manner while being able to maintain their brandings (Such as using their domains or sub-domains).</description>
    </item>
    
    <item>
      <title></title>
      <link>/aboutme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/aboutme/</guid>
      <description>Python&amp;rsquo;s being now a major part of my life. This beautiful language has made my life much better and easier. After programming and using Python for 1.5 years, I thought now is a good time to(at least) give sth back to the community: share and teach about Python to help others that might potentially benefit from this beautiful language.
This blog (and the YouTube channel associated) is all about Python. However, I&amp;rsquo;m by no means a Python guru or expert and you might be going to see I&amp;rsquo;m making some serious mistakes or setting some bad examples in my video tutorials.</description>
    </item>
    
    <item>
      <title></title>
      <link>/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contact/</guid>
      <description>title: Contact description: We&amp;rsquo;d love to hear from you type: page menu: main: {}
weight: 100  Your Name Email Address An email address is required.  Message   &amp;ndash;&amp;gt;</description>
    </item>
    
  </channel>
</rss>